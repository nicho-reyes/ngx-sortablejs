{"version":3,"file":"ngx-sortablejs.js","sources":["ng://ngx-sortablejs/lib/globals.ts","ng://ngx-sortablejs/lib/sortablejs-binding.ts","ng://ngx-sortablejs/lib/sortablejs-bindings.ts","ng://ngx-sortablejs/lib/sortablejs.service.ts","ng://ngx-sortablejs/lib/sortablejs.directive.ts","ng://ngx-sortablejs/lib/sortablejs.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { SortablejsOptions } from './sortablejs-options';\r\n\r\nexport const GLOBALS: InjectionToken<SortablejsOptions> = new InjectionToken('Global config for sortablejs');\r\n","import { SortablejsBindingTarget } from './sortablejs-binding-target';\r\n\r\nexport class SortablejsBinding {\r\n\r\n  constructor(private target: SortablejsBindingTarget) { }\r\n\r\n  insert(index: number, item: any) {\r\n    if (this.isFormArray) {\r\n      this.target.insert(index, item);\r\n    } else {\r\n      this.target.splice(index, 0, item);\r\n    }\r\n  }\r\n\r\n  get(index: number) {\r\n    return this.isFormArray ? this.target.at(index) : this.target[index];\r\n  }\r\n\r\n  remove(index: number) {\r\n    let item;\r\n\r\n    if (this.isFormArray) {\r\n      item = this.target.at(index);\r\n      this.target.removeAt(index);\r\n    } else {\r\n      item = this.target.splice(index, 1)[0];\r\n    }\r\n\r\n    return item;\r\n  }\r\n\r\n  // we need this to identify that the target is a FormArray\r\n  // we don't want to have a dependency on @angular/forms just for that\r\n  private get isFormArray() {\r\n    // just checking for random FormArray methods not available on a standard array\r\n    return !!this.target.at && !!this.target.insert && !!this.target.reset;\r\n  }\r\n\r\n}\r\n","import { SortablejsBinding } from './sortablejs-binding';\r\nimport { SortablejsBindingTarget } from './sortablejs-binding-target';\r\n\r\nexport class SortablejsBindings {\r\n\r\n  bindings: SortablejsBinding[];\r\n\r\n  constructor(bindingTargets: SortablejsBindingTarget[]) {\r\n    this.bindings = bindingTargets.map(target => new SortablejsBinding(target));\r\n  }\r\n\r\n  injectIntoEvery(index: number, items: any[]) {\r\n    this.bindings.forEach((b, i) => b.insert(index, items[i]));\r\n  }\r\n\r\n  getFromEvery(index: number) {\r\n    return this.bindings.map(b => b.get(index));\r\n  }\r\n\r\n  extractFromEvery(index: number) {\r\n    return this.bindings.map(b => b.remove(index));\r\n  }\r\n\r\n  get provided() {\r\n    return !!this.bindings.length;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SortablejsService {\r\n\r\n  // original library calls the events in unnatural order\r\n  // first the item is added, then removed from the previous array\r\n  // this is a temporary event to work this around\r\n  // as long as only one sortable takes place at a certain time\r\n  // this is enough to have a single `global` event\r\n  transfer: (items: any[]) => void;\r\n\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnChanges, OnDestroy, OnInit, Optional, Output, Renderer2, SimpleChange } from '@angular/core';\r\nimport Sortable from 'sortablejs';\r\nimport { GLOBALS } from './globals';\r\nimport { SortablejsBindingTarget } from './sortablejs-binding-target';\r\nimport { SortablejsBindings } from './sortablejs-bindings';\r\nimport { SortablejsOptions } from './sortablejs-options';\r\nimport { SortablejsService } from './sortablejs.service';\r\n\r\nconst getIndexesFromEvent = (event: SortableEvent) => {\r\n  if (event.hasOwnProperty('newDraggableIndex') && event.hasOwnProperty('oldDraggableIndex')) {\r\n      return {\r\n        new: event.newDraggableIndex,\r\n        old: event.oldDraggableIndex,\r\n      };\r\n  } else {\r\n    return {\r\n      new: event.newIndex,\r\n      old: event.oldIndex,\r\n    };\r\n  }\r\n};\r\n\r\n@Directive({\r\n  selector: '[sortablejs]',\r\n})\r\nexport class SortablejsDirective implements OnInit, OnChanges, OnDestroy {\r\n\r\n  @Input()\r\n  sortablejs: SortablejsBindingTarget; // array or a FormArray\r\n\r\n  @Input()\r\n  sortablejsContainer: string;\r\n\r\n  @Input()\r\n  sortablejsOptions: SortablejsOptions;\r\n\r\n  @Input()\r\n  sortablejsCloneFunction: <T>(item: T) => T;\r\n\r\n  private sortableInstance: any;\r\n\r\n  @Input() runInsideAngular = false; // to be deprecated\r\n\r\n  @Output() sortablejsInit = new EventEmitter();\r\n\r\n  constructor(\r\n    @Optional() @Inject(GLOBALS) private globalConfig: SortablejsOptions,\r\n    private service: SortablejsService,\r\n    private element: ElementRef,\r\n    private zone: NgZone,\r\n    private renderer: Renderer2,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    if (Sortable && Sortable.create) { // Sortable does not exist in angular universal (SSR)\r\n      if (this.runInsideAngular) {\r\n        this.create();\r\n      } else {\r\n        this.zone.runOutsideAngular(() => this.create());\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: { [prop in keyof SortablejsDirective]: SimpleChange }) {\r\n    const optionsChange: SimpleChange = changes.sortablejsOptions;\r\n\r\n    if (optionsChange && !optionsChange.isFirstChange()) {\r\n      const previousOptions: SortablejsOptions = optionsChange.previousValue;\r\n      const currentOptions: SortablejsOptions = optionsChange.currentValue;\r\n\r\n      Object.keys(currentOptions).forEach(optionName => {\r\n        if (currentOptions[optionName] !== previousOptions[optionName]) {\r\n          // use low-level option setter\r\n          this.sortableInstance.option(optionName, this.options[optionName]);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.sortableInstance) {\r\n      this.sortableInstance.destroy();\r\n    }\r\n  }\r\n\r\n  private create() {\r\n    const container = this.sortablejsContainer ? this.element.nativeElement.querySelector(this.sortablejsContainer) : this.element.nativeElement;\r\n\r\n    setTimeout(() => {\r\n      this.sortableInstance = Sortable.create(container, this.options);\r\n      this.sortablejsInit.emit(this.sortableInstance);\r\n    }, 0);\r\n  }\r\n\r\n  private getBindings(): SortablejsBindings {\r\n    if (!this.sortablejs) {\r\n      return new SortablejsBindings([]);\r\n    } else if (this.sortablejs instanceof SortablejsBindings) {\r\n      return this.sortablejs;\r\n    } else {\r\n      return new SortablejsBindings([this.sortablejs]);\r\n    }\r\n  }\r\n\r\n  private get options() {\r\n    return { ...this.optionsWithoutEvents, ...this.overridenOptions };\r\n  }\r\n\r\n  private get optionsWithoutEvents() {\r\n    return { ...(this.globalConfig || {}), ...(this.sortablejsOptions || {}) };\r\n  }\r\n\r\n  private proxyEvent(eventName: string, ...params: any[]) {\r\n    this.zone.run(() => { // re-entering zone, see https://github.com/SortableJS/angular-sortablejs/issues/110#issuecomment-408874600\r\n      if (this.optionsWithoutEvents && this.optionsWithoutEvents[eventName]) {\r\n        this.optionsWithoutEvents[eventName](...params);\r\n      }\r\n    });\r\n  }\r\n\r\n  private get isCloning() {\r\n    return this.sortableInstance.options.group.checkPull(this.sortableInstance, this.sortableInstance) === 'clone';\r\n  }\r\n\r\n  private clone<T>(item: T): T {\r\n    // by default pass the item through, no cloning performed\r\n    return (this.sortablejsCloneFunction || (subitem => subitem))(item);\r\n  }\r\n\r\n  private get overridenOptions(): SortablejsOptions {\r\n    // always intercept standard events but act only in case items are set (bindingEnabled)\r\n    // allows to forget about tracking this.items changes\r\n    return {\r\n      onAdd: (event: SortableEvent) => {\r\n        this.service.transfer = (items: any[]) => {\r\n          this.getBindings().injectIntoEvery(event.newIndex, items);\r\n          this.proxyEvent('onAdd', event);\r\n        };\r\n\r\n        this.proxyEvent('onAddOriginal', event);\r\n      },\r\n      onRemove: (event: SortableEvent) => {\r\n        const bindings = this.getBindings();\r\n\r\n        if (bindings.provided) {\r\n          if (this.isCloning) {\r\n            this.service.transfer(bindings.getFromEvery(event.oldIndex).map(item => this.clone(item)));\r\n\r\n            // great thanks to https://github.com/tauu\r\n            // event.item is the original item from the source list which is moved to the target list\r\n            // event.clone is a clone of the original item and will be added to source list\r\n            // If bindings are provided, adding the item dom element to the target list causes artifacts\r\n            // as it interferes with the rendering performed by the angular template.\r\n            // Therefore we remove it immediately and also move the original item back to the source list.\r\n            // (event handler may be attached to the original item and not its clone, therefore keeping\r\n            // the original dom node, circumvents side effects )\r\n            this.renderer.removeChild(event.item.parentNode, event.item);\r\n            this.renderer.insertBefore(event.clone.parentNode, event.item, event.clone);\r\n            this.renderer.removeChild(event.clone.parentNode, event.clone);\r\n          } else {\r\n            this.service.transfer(bindings.extractFromEvery(event.oldIndex));\r\n          }\r\n\r\n          this.service.transfer = null;\r\n        }\r\n\r\n        this.proxyEvent('onRemove', event);\r\n      },\r\n      onUpdate: (event: SortableEvent) => {\r\n        const bindings = this.getBindings();\r\n        const indexes = getIndexesFromEvent(event);\r\n\r\n        bindings.injectIntoEvery(indexes.new, bindings.extractFromEvery(indexes.old));\r\n        this.proxyEvent('onUpdate', event);\r\n      },\r\n    };\r\n  }\r\n\r\n}\r\n\r\ninterface SortableEvent {\r\n  oldIndex: number;\r\n  newIndex: number;\r\n  oldDraggableIndex?: number;\r\n  newDraggableIndex?: number;\r\n  item: HTMLElement;\r\n  clone: HTMLElement;\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { GLOBALS } from './globals';\r\nimport { SortablejsOptions } from './sortablejs-options';\r\nimport { SortablejsDirective } from './sortablejs.directive';\r\n\r\n@NgModule({\r\n  declarations: [SortablejsDirective],\r\n  exports: [SortablejsDirective],\r\n})\r\nexport class SortablejsModule {\r\n\r\n  public static forRoot(globalOptions: SortablejsOptions): ModuleWithProviders<SortablejsModule> {\r\n    return {\r\n      ngModule: SortablejsModule,\r\n      providers: [\r\n        { provide: GLOBALS, useValue: globalOptions },\r\n      ],\r\n    };\r\n  }\r\n\r\n}\r\n"],"names":[],"mappings":"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"}